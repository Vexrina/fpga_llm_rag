// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: rag.proto

package rag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RagService_AddDocument_FullMethodName     = "/rag.RagService/AddDocument"
	RagService_SearchDocuments_FullMethodName = "/rag.RagService/SearchDocuments"
	RagService_GetDocument_FullMethodName     = "/rag.RagService/GetDocument"
	RagService_DeleteDocument_FullMethodName  = "/rag.RagService/DeleteDocument"
	RagService_GetIndexStats_FullMethodName   = "/rag.RagService/GetIndexStats"
)

// RagServiceClient is the client API for RagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RAG сервис для работы с документами и поиском
type RagServiceClient interface {
	// Добавить документ в индекс
	AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error)
	// Поиск документов по запросу
	SearchDocuments(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Получить документ по ID
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	// Удалить документ по ID
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	// Получить статистику индекса
	GetIndexStats(ctx context.Context, in *GetIndexStatsRequest, opts ...grpc.CallOption) (*GetIndexStatsResponse, error)
}

type ragServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRagServiceClient(cc grpc.ClientConnInterface) RagServiceClient {
	return &ragServiceClient{cc}
}

func (c *ragServiceClient) AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDocumentResponse)
	err := c.cc.Invoke(ctx, RagService_AddDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) SearchDocuments(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, RagService_SearchDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, RagService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, RagService_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ragServiceClient) GetIndexStats(ctx context.Context, in *GetIndexStatsRequest, opts ...grpc.CallOption) (*GetIndexStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIndexStatsResponse)
	err := c.cc.Invoke(ctx, RagService_GetIndexStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RagServiceServer is the server API for RagService service.
// All implementations must embed UnimplementedRagServiceServer
// for forward compatibility.
//
// RAG сервис для работы с документами и поиском
type RagServiceServer interface {
	// Добавить документ в индекс
	AddDocument(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error)
	// Поиск документов по запросу
	SearchDocuments(context.Context, *SearchRequest) (*SearchResponse, error)
	// Получить документ по ID
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// Удалить документ по ID
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	// Получить статистику индекса
	GetIndexStats(context.Context, *GetIndexStatsRequest) (*GetIndexStatsResponse, error)
	mustEmbedUnimplementedRagServiceServer()
}

// UnimplementedRagServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRagServiceServer struct{}

func (UnimplementedRagServiceServer) AddDocument(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocument not implemented")
}
func (UnimplementedRagServiceServer) SearchDocuments(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDocuments not implemented")
}
func (UnimplementedRagServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedRagServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedRagServiceServer) GetIndexStats(context.Context, *GetIndexStatsRequest) (*GetIndexStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexStats not implemented")
}
func (UnimplementedRagServiceServer) mustEmbedUnimplementedRagServiceServer() {}
func (UnimplementedRagServiceServer) testEmbeddedByValue()                    {}

// UnsafeRagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RagServiceServer will
// result in compilation errors.
type UnsafeRagServiceServer interface {
	mustEmbedUnimplementedRagServiceServer()
}

func RegisterRagServiceServer(s grpc.ServiceRegistrar, srv RagServiceServer) {
	// If the following call pancis, it indicates UnimplementedRagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RagService_ServiceDesc, srv)
}

func _RagService_AddDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).AddDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_AddDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).AddDocument(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_SearchDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).SearchDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_SearchDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).SearchDocuments(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RagService_GetIndexStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).GetIndexStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RagService_GetIndexStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).GetIndexStats(ctx, req.(*GetIndexStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RagService_ServiceDesc is the grpc.ServiceDesc for RagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rag.RagService",
	HandlerType: (*RagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDocument",
			Handler:    _RagService_AddDocument_Handler,
		},
		{
			MethodName: "SearchDocuments",
			Handler:    _RagService_SearchDocuments_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _RagService_GetDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _RagService_DeleteDocument_Handler,
		},
		{
			MethodName: "GetIndexStats",
			Handler:    _RagService_GetIndexStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rag.proto",
}

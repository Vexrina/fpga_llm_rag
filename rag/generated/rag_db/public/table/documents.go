//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Documents = newDocumentsTable("public", "documents", "")

type documentsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Title     postgres.ColumnString
	Content   postgres.ColumnString
	Metadata  postgres.ColumnString
	Embedding postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type DocumentsTable struct {
	documentsTable

	EXCLUDED documentsTable
}

// AS creates new DocumentsTable with assigned alias
func (a DocumentsTable) AS(alias string) *DocumentsTable {
	return newDocumentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DocumentsTable with assigned schema name
func (a DocumentsTable) FromSchema(schemaName string) *DocumentsTable {
	return newDocumentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DocumentsTable with assigned table prefix
func (a DocumentsTable) WithPrefix(prefix string) *DocumentsTable {
	return newDocumentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DocumentsTable with assigned table suffix
func (a DocumentsTable) WithSuffix(suffix string) *DocumentsTable {
	return newDocumentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDocumentsTable(schemaName, tableName, alias string) *DocumentsTable {
	return &DocumentsTable{
		documentsTable: newDocumentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newDocumentsTableImpl("", "excluded", ""),
	}
}

func newDocumentsTableImpl(schemaName, tableName, alias string) documentsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		TitleColumn     = postgres.StringColumn("title")
		ContentColumn   = postgres.StringColumn("content")
		MetadataColumn  = postgres.StringColumn("metadata")
		EmbeddingColumn = postgres.StringColumn("embedding")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, TitleColumn, ContentColumn, MetadataColumn, EmbeddingColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{TitleColumn, ContentColumn, MetadataColumn, EmbeddingColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return documentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Title:     TitleColumn,
		Content:   ContentColumn,
		Metadata:  MetadataColumn,
		Embedding: EmbeddingColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
